module subberTest (
    input clk,  // clock
    input rst,  // reset
    input button,
    output checkoff[8], // is current correct????
    output flag[4], // output the flags for this error
    output s[16] // output of sum value, 
   ) {
      // declare modules and constants 
      sixteen_bit_full_adder fa;
    .clk(clk) {
      edge_detector edge_detector(#RISE(1), #FALL(0));
      .rst(rst) {
        // register to show which test case we are on. 
        // lit nth bit starting from the left, means we are currently at nth case
        // output to the right bakn of leds
        dff checkoff_reg[8](#INIT(0), .clk(clk), .rst(rst));
        // error state left bit to right bit
        // z v n s
        // output to the middle bank of leds,
        dff flag_reg[4](#INIT(0), .clk(clk), .rst(rst));
        // error s 
        dff s_reg[16](#INIT(0), .clk(clk), .rst(rst));
        // we move to the next state by pressing the centre io button
        // in each state we do the calculation and then print the result to the segment display
        // when catching a error, i.e the err state, we go immediately to error state
        // in error state we can return to start state by pressing centre io button
        // in error state, print the error state z v n s values that are wrong in the the middle led bank
        // pressing the left button jumps to end state so we can demonstrate how 
        fsm testCase(#INIT(START), .clk(clk), .rst(rst)) = {START,PPP,NPN,PP0,NPV,ERR,END,ERROR_STATE};
      }
    }
    // from left to the right of second bank of ioled
    // z v n s
    // constants test conditions
    // PPP
    const PPP_X = 16h4f34;    
    const PPP_ALUFN = b000001;
    const PPP_Y = 16h2321;    
    const PPP_S = 16h2c13;    
    const PPP_Z = 0;
    const PPP_V = 0;
    const PPP_N = 0;


    // NPN
    const NPN_X = 16hfff0;    
    const NPN_ALUFN = b000001;
    const NPN_Y = 16h0001;    
    const NPN_S = 16hffef;    
    const NPN_Z = 0;
    const NPN_V = 0;
    const NPN_N = 1;


    // PP0
    const PP0_X = 16hc001;    
    const PP0_ALUFN = b000001;
    const PP0_Y = 16hc001;    
    const PP0_S = 0;
    const PP0_Z = 1;
    const PP0_V = 0;
    const PP0_N = 0;


    // NPV
    const NPV_X = 16h9f22;    
    const NPV_ALUFN = b000001;
    const NPV_Y = 16h2ff3;    
    const NPV_S = 16h6f2f;    
    const NPV_Z = 0;
    const NPV_V = 1;
    const NPV_N = 0;


    // ERR
    const ERR_X = 16h0001;
    const ERR_ALUFN = b000001;
    const ERR_Y = 16h0001;
    const ERR_S = 16h000f;
    const ERR_Z = 0;
    const ERR_V = 1;
    const ERR_N = 1;
   
    

 always {
    // q is out and d is input for dff 
    // default outputs
    checkoff = checkoff_reg.q;
    flag = flag_reg.q;
    s = s_reg.q;

    // default inputs
    fa.x = 0;
    fa.y = 0; 
    fa.op = 0;

    edge_detector.in = button;


    //declare fsm
    case (testCase.q) {
        testCase.START:
        flag_reg.d = 8h00;
        s_reg.d = 16h50bb;
        checkoff_reg.d = 16h0000;
        if (edge_detector.out == 1) {
          testCase.d = testCase.PPP;
        }
        // PPP
        testCase.PPP:
        fa.x = PPP_X;
        fa.y = PPP_Y;
        fa.op = PPP_ALUFN;
        //turn on io_led to indicate which case we are on
        checkoff_reg.d[7] = 1;
        //wait for the timer
        // check values
        flag_reg.d[3] = (fa.z != PPP_Z);
        flag_reg.d[2] = (fa.v != PPP_V);
        flag_reg.d[1] = (fa.n != PPP_N);
        flag_reg.d[0] = (fa.s != PPP_S);
        s_reg.d = fa.s;
        if (fa.s == PPP_S & fa.z == PPP_Z & fa.n == PPP_N & fa.v == PPP_V){
            if (edge_detector.out == 1) {
                testCase.d = testCase.NPN;
            }
            } else {
                testCase.d = testCase.ERROR_STATE;
        }


        // NPN
        testCase.NPN:
        fa.x = NPN_X;
        fa.y = NPN_Y;
        fa.op = NPN_ALUFN;
        //turn on io_led to indicate which case we are on
        checkoff_reg.d[6] = 1;
        //wait for the timer
        // check values
        flag_reg.d[3] = (fa.z != NPN_Z);
        flag_reg.d[2] = (fa.v != NPN_V);
        flag_reg.d[1] = (fa.n != NPN_N);
        flag_reg.d[0] = (fa.s != NPN_S);
        s_reg.d = fa.s;
        if (fa.s == NPN_S & fa.z == NPN_Z & fa.n == NPN_N & fa.v == NPN_V){
            if (edge_detector.out == 1) {
                testCase.d = testCase.PP0;
            }
            } else {
                testCase.d = testCase.ERROR_STATE;
        }


        // PP0
        testCase.PP0:
        fa.x = PP0_X;
        fa.y = PP0_Y;
        fa.op = PP0_ALUFN;
        //turn on io_led to indicate which case we are on
        checkoff_reg.d[5] = 1;
        //wait for the timer
        // check values
        flag_reg.d[3] = (fa.z != PP0_Z);
        flag_reg.d[2] = (fa.v != PP0_V);
        flag_reg.d[1] = (fa.n != PP0_N);
        flag_reg.d[0] = (fa.s != PP0_S);
        s_reg.d = fa.s;
        if (fa.s == PP0_S & fa.z == PP0_Z & fa.n == PP0_N & fa.v == PP0_V){
            if (edge_detector.out == 1) {
                testCase.d = testCase.NPV;
            }
            } else {
                testCase.d = testCase.ERROR_STATE;
        }


        // NPV
        testCase.NPV:
        fa.x = NPV_X;
        fa.y = NPV_Y;
        fa.op = NPV_ALUFN;
        //turn on io_led to indicate which case we are on
        checkoff_reg.d[4] = 1;
        //wait for the timer
        // check values
        flag_reg.d[3] = (fa.z != NPV_Z);
        flag_reg.d[2] = (fa.v != NPV_V);
        flag_reg.d[1] = (fa.n != NPV_N);
        flag_reg.d[0] = (fa.s != NPV_S);
        s_reg.d = fa.s;
        if (fa.s == NPV_S & fa.z == NPV_Z & fa.n == NPV_N & fa.v == NPV_V){
            if (edge_detector.out == 1) {
                testCase.d = testCase.ERR;
            }
            } else {
                testCase.d = testCase.ERROR_STATE;
        }



        // ERR
        testCase.ERR:
        fa.x = ERR_X;
        fa.y = ERR_Y;
        fa.op = ERR_ALUFN;
        //turn on io_led to indicate which case we are on
        checkoff_reg.d[3] = 1;
        //wait for the timer
        // check values
        flag_reg.d[3] = (fa.z != ERR_Z);
        flag_reg.d[2] = (fa.v != ERR_V);
        flag_reg.d[1] = (fa.n != ERR_N);
        flag_reg.d[0] = (fa.s != ERR_S);
        s_reg.d = 16hdead;
        if (fa.s == ERR_S & fa.z == ERR_Z & fa.n == ERR_N & fa.v == ERR_V){
            if (edge_detector.out == 1) {
                testCase.d = testCase.ERR;
            }
            } else {
                testCase.d = testCase.ERROR_STATE;
        }
      testCase.ERROR_STATE:
      // we remain in error state until we press button
      if (edge_detector.out ==1){
        testCase.d = testCase.END;
        }
      testCase.END:
      // turn on all the lights used 
      // turn the registers we use to all equal 1s bitwise
      flag_reg.d = 8hff;
      checkoff_reg.d = 8hff;
      // write cool on segment leds
      s_reg.d =16hc001;
      // output them registers
      s = s_reg.q;
      flag = flag_reg.q;
      checkoff = checkoff_reg.q;
      //remain in this state until we press the button
      if (edge_detector.out ==1){
        testCase.d = testCase.START;
      }    
    }

    
  }
}
