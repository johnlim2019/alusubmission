/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_manual_4 (
    input clk,
    input rst,
    input abutton,
    input bbutton,
    input [5:0] alufn,
    input [15:0] value,
    output reg [2:0] zvn,
    output reg [15:0] s
  );
  
  
  
  wire [16-1:0] M_alu_s;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_x;
  reg [16-1:0] M_alu_y;
  reg [6-1:0] M_alu_op;
  alu_11 alu (
    .x(M_alu_x),
    .y(M_alu_y),
    .op(M_alu_op),
    .s(M_alu_s),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [1-1:0] M_a_detector_out;
  reg [1-1:0] M_a_detector_in;
  edge_detector_12 a_detector (
    .clk(clk),
    .in(M_a_detector_in),
    .out(M_a_detector_out)
  );
  wire [1-1:0] M_b_detector_out;
  reg [1-1:0] M_b_detector_in;
  edge_detector_12 b_detector (
    .clk(clk),
    .in(M_b_detector_in),
    .out(M_b_detector_out)
  );
  reg [15:0] M_store_a_d, M_store_a_q = 1'h0;
  reg [15:0] M_store_b_d, M_store_b_q = 1'h0;
  reg [5:0] M_store_alufn_d, M_store_alufn_q = 1'h0;
  reg [15:0] M_store_s_d, M_store_s_q = 1'h0;
  reg [2:0] M_store_zvn_d, M_store_zvn_q = 1'h0;
  
  always @* begin
    M_store_a_d = M_store_a_q;
    M_store_b_d = M_store_b_q;
    M_store_s_d = M_store_s_q;
    M_store_alufn_d = M_store_alufn_q;
    M_store_zvn_d = M_store_zvn_q;
    
    M_a_detector_in = abutton;
    M_b_detector_in = bbutton;
    M_alu_x = M_store_a_q;
    M_alu_y = M_store_b_q;
    M_alu_op = M_store_alufn_q;
    M_store_s_d = M_alu_s;
    M_store_zvn_d[2+0-:1] = M_alu_z;
    M_store_zvn_d[1+0-:1] = M_alu_v;
    M_store_zvn_d[0+0-:1] = M_alu_n;
    zvn = M_store_zvn_q;
    s = M_store_s_q;
    M_store_alufn_d = alufn;
    if (M_a_detector_out == 1'h1) begin
      M_store_a_d = value;
    end
    if (M_b_detector_out == 1'h1) begin
      M_store_b_d = value;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_store_b_q <= 1'h0;
    end else begin
      M_store_b_q <= M_store_b_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_store_s_q <= 1'h0;
    end else begin
      M_store_s_q <= M_store_s_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_store_alufn_q <= 1'h0;
    end else begin
      M_store_alufn_q <= M_store_alufn_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_store_zvn_q <= 1'h0;
    end else begin
      M_store_zvn_q <= M_store_zvn_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_store_a_q <= 1'h0;
    end else begin
      M_store_a_q <= M_store_a_d;
    end
  end
  
endmodule
