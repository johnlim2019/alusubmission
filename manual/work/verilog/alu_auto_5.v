/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_auto_5 (
    input clk,
    input rst,
    input button,
    output reg [5:0] alufn,
    output reg [7:0] checkoff,
    output reg [3:0] flag,
    output reg [15:0] s
  );
  
  
  
  wire [16-1:0] M_alu_s;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_x;
  reg [16-1:0] M_alu_y;
  reg [6-1:0] M_alu_op;
  alu_10 alu (
    .x(M_alu_x),
    .y(M_alu_y),
    .op(M_alu_op),
    .s(M_alu_s),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  localparam SLOWCLOCK_SIZE = 5'h1d;
  
  wire [29-1:0] M_slowClock_value;
  counter_12 slowClock (
    .clk(clk),
    .rst(rst),
    .value(M_slowClock_value)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_11 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [1-1:0] M_button_detector_out;
  reg [1-1:0] M_button_detector_in;
  edge_detector_11 button_detector (
    .clk(clk),
    .in(M_button_detector_in),
    .out(M_button_detector_out)
  );
  reg [7:0] M_checkoff_reg_d, M_checkoff_reg_q = 1'h0;
  reg [3:0] M_flag_reg_d, M_flag_reg_q = 1'h0;
  reg [15:0] M_s_reg_d, M_s_reg_q = 1'h0;
  reg [5:0] M_alufn_reg_d, M_alufn_reg_q = 1'h0;
  localparam START_testCase = 6'd0;
  localparam ADDSTART_testCase = 6'd1;
  localparam ADD0_testCase = 6'd2;
  localparam ADD1_testCase = 6'd3;
  localparam ADD2_testCase = 6'd4;
  localparam ADD3_testCase = 6'd5;
  localparam SUBSTART_testCase = 6'd6;
  localparam SUB0_testCase = 6'd7;
  localparam SUB1_testCase = 6'd8;
  localparam SUB2_testCase = 6'd9;
  localparam SUB3_testCase = 6'd10;
  localparam MULSTART_testCase = 6'd11;
  localparam MUL0_testCase = 6'd12;
  localparam MUL1_testCase = 6'd13;
  localparam MUL2_testCase = 6'd14;
  localparam MUL3_testCase = 6'd15;
  localparam BOOLSTART_testCase = 6'd16;
  localparam AND_testCase = 6'd17;
  localparam OR_testCase = 6'd18;
  localparam XOR_testCase = 6'd19;
  localparam A_testCase = 6'd20;
  localparam SHLSTART_testCase = 6'd21;
  localparam LS1_testCase = 6'd22;
  localparam LS2_testCase = 6'd23;
  localparam LS4_testCase = 6'd24;
  localparam LS8_testCase = 6'd25;
  localparam SHRSTART_testCase = 6'd26;
  localparam RS1_testCase = 6'd27;
  localparam RS2_testCase = 6'd28;
  localparam RS4_testCase = 6'd29;
  localparam RS8_testCase = 6'd30;
  localparam SRASTART_testCase = 6'd31;
  localparam RSA1_testCase = 6'd32;
  localparam RSA2_testCase = 6'd33;
  localparam RSA4_testCase = 6'd34;
  localparam RSA8_testCase = 6'd35;
  localparam CMPEQSTART_testCase = 6'd36;
  localparam CMPEQ1_testCase = 6'd37;
  localparam CMPEQ2_testCase = 6'd38;
  localparam CMPEQ3_testCase = 6'd39;
  localparam CMPEQ4_testCase = 6'd40;
  localparam CMPLTSTART_testCase = 6'd41;
  localparam CMPLT1_testCase = 6'd42;
  localparam CMPLT2_testCase = 6'd43;
  localparam CMPLT3_testCase = 6'd44;
  localparam CMPLT4_testCase = 6'd45;
  localparam CMPLESTART_testCase = 6'd46;
  localparam CMPLE1_testCase = 6'd47;
  localparam CMPLE2_testCase = 6'd48;
  localparam CMPLE3_testCase = 6'd49;
  localparam CMPLE4_testCase = 6'd50;
  localparam ERRCASE_testCase = 6'd51;
  localparam END_testCase = 6'd52;
  localparam ERROR_STATE_testCase = 6'd53;
  
  reg [5:0] M_testCase_d, M_testCase_q = START_testCase;
  
  always @* begin
    M_testCase_d = M_testCase_q;
    M_flag_reg_d = M_flag_reg_q;
    M_alufn_reg_d = M_alufn_reg_q;
    M_s_reg_d = M_s_reg_q;
    M_checkoff_reg_d = M_checkoff_reg_q;
    
    M_alu_op = 1'h0;
    M_alu_x = 1'h0;
    M_alu_y = 1'h0;
    checkoff = M_checkoff_reg_q;
    flag = M_flag_reg_q;
    s = M_s_reg_q;
    alufn = M_alufn_reg_q;
    M_button_detector_in = button;
    M_edge_detector_in = M_slowClock_value[28+0-:1];
    M_edge_detector_in = button;
    
    case (M_testCase_q)
      START_testCase: begin
        M_flag_reg_d = 8'h00;
        M_s_reg_d = 16'h0000;
        M_checkoff_reg_d = 16'h0000;
        if (M_button_detector_out == 1'h1) begin
          M_testCase_d = ADDSTART_testCase;
        end
      end
      ADDSTART_testCase: begin
        M_flag_reg_d = 8'h00;
        M_s_reg_d = 16'hadd0;
        M_checkoff_reg_d = 16'h0000;
        M_alufn_reg_d = 1'h0;
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = ADD0_testCase;
        end
      end
      ADD0_testCase: begin
        M_alu_x = 16'h5e94;
        M_alu_y = 16'h132f;
        M_alu_op = 6'h00;
        M_checkoff_reg_d[0+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h71c3);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h00;
        if (M_alu_s == 16'h71c3 & M_alu_z == 1'h0 & M_alu_n == 1'h0 & M_alu_v == 1'h0) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = ADD1_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      ADD1_testCase: begin
        M_alu_x = 16'h000f;
        M_alu_y = 16'hffec;
        M_alu_op = 6'h00;
        M_checkoff_reg_d[1+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'hfffb);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h00;
        if (M_alu_s == 16'hfffb & M_alu_z == 1'h0 & M_alu_n == 1'h1 & M_alu_v == 1'h0) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = ADD2_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      ADD2_testCase: begin
        M_alu_x = 1'h0;
        M_alu_y = 1'h0;
        M_alu_op = 6'h00;
        M_checkoff_reg_d[2+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 1'h0);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h00;
        if (M_alu_s == 1'h0 & M_alu_z == 1'h1 & M_alu_n == 1'h0 & M_alu_v == 1'h0) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = ADD3_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      ADD3_testCase: begin
        M_alu_x = 16'h0001;
        M_alu_y = 16'h7fff;
        M_alu_op = 6'h00;
        M_checkoff_reg_d[3+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h8000);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h00;
        if (M_alu_s == 16'h8000 & M_alu_z == 1'h0 & M_alu_n == 1'h1 & M_alu_v == 1'h1) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = SUBSTART_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      SUBSTART_testCase: begin
        M_flag_reg_d = 8'h00;
        M_s_reg_d = 16'h50bb;
        M_checkoff_reg_d = 16'h0000;
        M_alufn_reg_d = 1'h0;
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = SUB0_testCase;
        end
      end
      SUB0_testCase: begin
        M_alu_x = 16'h4f34;
        M_alu_y = 16'h2321;
        M_alu_op = 6'h01;
        M_checkoff_reg_d[0+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h2c13);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h01;
        if (M_alu_s == 16'h2c13 & M_alu_z == 1'h0 & M_alu_n == 1'h0 & M_alu_v == 1'h0) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = SUB1_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      SUB1_testCase: begin
        M_alu_x = 16'hfff0;
        M_alu_y = 16'h0001;
        M_alu_op = 6'h01;
        M_checkoff_reg_d[1+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'hffef);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h01;
        if (M_alu_s == 16'hffef & M_alu_z == 1'h0 & M_alu_n == 1'h1 & M_alu_v == 1'h0) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = SUB2_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      SUB2_testCase: begin
        M_alu_x = 16'hc001;
        M_alu_y = 16'hc001;
        M_alu_op = 6'h01;
        M_checkoff_reg_d[2+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 1'h0);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h01;
        if (M_alu_s == 1'h0 & M_alu_z == 1'h1 & M_alu_n == 1'h0 & M_alu_v == 1'h0) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = SUB3_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      SUB3_testCase: begin
        M_alu_x = 16'h9f22;
        M_alu_y = 16'h2ff3;
        M_alu_op = 6'h01;
        M_checkoff_reg_d[3+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h6f2f);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h01;
        if (M_alu_s == 16'h6f2f & M_alu_z == 1'h0 & M_alu_n == 1'h0 & M_alu_v == 1'h1) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = SHLSTART_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      SHLSTART_testCase: begin
        M_flag_reg_d = 8'h00;
        M_s_reg_d = 16'h5f71;
        M_checkoff_reg_d = 16'h0000;
        M_alufn_reg_d = 1'h0;
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = LS1_testCase;
        end
      end
      LS1_testCase: begin
        M_alu_x = 16'hf001;
        M_alu_y = 16'h0001;
        M_alu_op = 6'h20;
        M_checkoff_reg_d[0+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'he002);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h20;
        if (M_alu_s == 16'he002) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = LS2_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      LS2_testCase: begin
        M_alu_x = 16'hf001;
        M_alu_y = 16'h0002;
        M_alu_op = 6'h20;
        M_checkoff_reg_d[1+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'hc004);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h20;
        if (M_alu_s == 16'hc004) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = LS4_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      LS4_testCase: begin
        M_alu_x = 16'hf001;
        M_alu_y = 16'h0004;
        M_alu_op = 6'h20;
        M_checkoff_reg_d[2+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0010);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h20;
        if (M_alu_s == 16'h0010) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = LS8_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      LS8_testCase: begin
        M_alu_x = 16'hf001;
        M_alu_y = 16'h0008;
        M_alu_op = 6'h20;
        M_checkoff_reg_d[3+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0100);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h20;
        if (M_alu_s == 16'h0100) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = SHRSTART_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      SHRSTART_testCase: begin
        M_flag_reg_d = 8'h00;
        M_s_reg_d = 16'h5f78;
        M_checkoff_reg_d = 16'h0000;
        M_alufn_reg_d = 1'h0;
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = RS1_testCase;
        end
      end
      RS1_testCase: begin
        M_alu_x = 16'hf001;
        M_alu_y = 16'h0001;
        M_alu_op = 6'h21;
        M_checkoff_reg_d[0+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h7800);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h21;
        if (M_alu_s == 16'h7800) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = RS2_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      RS2_testCase: begin
        M_alu_x = 16'hf001;
        M_alu_y = 16'h0002;
        M_alu_op = 6'h21;
        M_checkoff_reg_d[1+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h3c00);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h21;
        if (M_alu_s == 16'h3c00) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = RS4_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      RS4_testCase: begin
        M_alu_x = 16'hf001;
        M_alu_y = 16'h0004;
        M_alu_op = 6'h21;
        M_checkoff_reg_d[2+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0f00);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h21;
        if (M_alu_s == 16'h0f00) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = RS8_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      RS8_testCase: begin
        M_alu_x = 16'hf001;
        M_alu_y = 16'h0008;
        M_alu_op = 6'h21;
        M_checkoff_reg_d[3+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h00f0);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h21;
        if (M_alu_s == 16'h00f0) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = SRASTART_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      SRASTART_testCase: begin
        M_flag_reg_d = 8'h00;
        M_s_reg_d = 16'h5f7a;
        M_checkoff_reg_d = 16'h0000;
        M_alufn_reg_d = 1'h0;
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = RSA1_testCase;
        end
      end
      RSA1_testCase: begin
        M_alu_x = 16'hf001;
        M_alu_y = 16'h0001;
        M_alu_op = 6'h23;
        M_checkoff_reg_d[0+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'hf800);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h23;
        if (M_alu_s == 16'hf800) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = RSA2_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      RSA2_testCase: begin
        M_alu_x = 16'hf001;
        M_alu_y = 16'h0002;
        M_alu_op = 6'h23;
        M_checkoff_reg_d[1+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'hfc00);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h23;
        if (M_alu_s == 16'hfc00) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = RSA4_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      RSA4_testCase: begin
        M_alu_x = 16'hf001;
        M_alu_y = 16'h0004;
        M_alu_op = 6'h23;
        M_checkoff_reg_d[2+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'hff00);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h23;
        if (M_alu_s == 16'hff00) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = RSA8_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      RSA8_testCase: begin
        M_alu_x = 16'hf001;
        M_alu_y = 16'h0008;
        M_alu_op = 6'h23;
        M_checkoff_reg_d[3+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'hfff0);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h23;
        if (M_alu_s == 16'hfff0) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = BOOLSTART_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      BOOLSTART_testCase: begin
        M_flag_reg_d = 8'h00;
        M_s_reg_d = 16'hb001;
        M_checkoff_reg_d = 16'h0000;
        M_alufn_reg_d = 1'h0;
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = AND_testCase;
        end
      end
      AND_testCase: begin
        M_alu_x = 16'h6857;
        M_alu_y = 16'hac08;
        M_alu_op = 4'h8;
        M_checkoff_reg_d[0+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h2800);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 4'h8;
        if (M_alu_s == 16'h2800) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = OR_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      OR_testCase: begin
        M_alu_x = 16'h6857;
        M_alu_y = 16'hac08;
        M_alu_op = 4'he;
        M_checkoff_reg_d[1+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'hec5f);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 4'he;
        if (M_alu_s == 16'hec5f) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = XOR_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      XOR_testCase: begin
        M_alu_x = 16'h6857;
        M_alu_y = 16'hac08;
        M_alu_op = 3'h6;
        M_checkoff_reg_d[2+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'hc45f);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 3'h6;
        if (M_alu_s == 16'hc45f) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = A_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      A_testCase: begin
        M_alu_x = 16'h6857;
        M_alu_y = 16'hac08;
        M_alu_op = 4'ha;
        M_checkoff_reg_d[3+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h6857);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 4'ha;
        if (M_alu_s == 16'h6857) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = CMPEQSTART_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      CMPEQSTART_testCase: begin
        M_flag_reg_d = 8'h00;
        M_s_reg_d = 16'hc01e;
        M_checkoff_reg_d = 16'h0000;
        M_alufn_reg_d = 1'h0;
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = CMPEQ1_testCase;
        end
      end
      CMPEQ1_testCase: begin
        M_alu_x = 16'h0010;
        M_alu_y = 16'h0010;
        M_alu_op = 6'h33;
        M_checkoff_reg_d[0+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0001);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h33;
        if (M_alu_s == 16'h0001) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = CMPEQ2_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      CMPEQ2_testCase: begin
        M_alu_x = 16'h0010;
        M_alu_y = 16'hffff;
        M_alu_op = 6'h33;
        M_checkoff_reg_d[1+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0000);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h33;
        if (M_alu_s == 16'h0000) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = CMPEQ3_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      CMPEQ3_testCase: begin
        M_alu_x = 16'h0010;
        M_alu_y = 16'h7000;
        M_alu_op = 6'h33;
        M_checkoff_reg_d[2+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0000);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h33;
        if (M_alu_s == 16'h0000) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = CMPEQ4_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      CMPEQ4_testCase: begin
        M_alu_x = 16'hf001;
        M_alu_y = 16'hf001;
        M_alu_op = 6'h33;
        M_checkoff_reg_d[3+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0001);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h33;
        if (M_alu_s == 16'h0001) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = CMPLTSTART_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      CMPLTSTART_testCase: begin
        M_flag_reg_d = 8'h00;
        M_s_reg_d = 16'hc017;
        M_checkoff_reg_d = 16'h0000;
        M_alufn_reg_d = 1'h0;
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = CMPLT1_testCase;
        end
      end
      CMPLT1_testCase: begin
        M_alu_x = 16'h0010;
        M_alu_y = 16'h0010;
        M_alu_op = 6'h35;
        M_checkoff_reg_d[0+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0000);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h35;
        if (M_alu_s == 16'h0000) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = CMPLT2_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      CMPLT2_testCase: begin
        M_alu_x = 16'h0010;
        M_alu_y = 16'hffff;
        M_alu_op = 6'h35;
        M_checkoff_reg_d[1+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0000);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h35;
        if (M_alu_s == 16'h0000) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = CMPLT3_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      CMPLT3_testCase: begin
        M_alu_x = 16'h0010;
        M_alu_y = 16'h7000;
        M_alu_op = 6'h35;
        M_checkoff_reg_d[2+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0001);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h35;
        if (M_alu_s == 16'h0001) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = CMPLT4_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      CMPLT4_testCase: begin
        M_alu_x = 16'h0010;
        M_alu_y = 16'hf001;
        M_alu_op = 6'h35;
        M_checkoff_reg_d[3+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0000);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h35;
        if (M_alu_s == 16'h0000) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = CMPLESTART_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      CMPLESTART_testCase: begin
        M_flag_reg_d = 8'h00;
        M_s_reg_d = 16'hc01e;
        M_checkoff_reg_d = 16'h0000;
        M_alufn_reg_d = 1'h0;
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = CMPLE1_testCase;
        end
      end
      CMPLE1_testCase: begin
        M_alu_x = 16'h0010;
        M_alu_y = 16'h0010;
        M_alu_op = 6'h37;
        M_checkoff_reg_d[0+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0001);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h37;
        if (M_alu_s == 16'h0001) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = CMPLE2_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      CMPLE2_testCase: begin
        M_alu_x = 16'h0010;
        M_alu_y = 16'hffff;
        M_alu_op = 6'h37;
        M_checkoff_reg_d[1+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0000);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h37;
        if (M_alu_s == 16'h0000) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = CMPLE3_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      CMPLE3_testCase: begin
        M_alu_x = 16'h0010;
        M_alu_y = 16'h7000;
        M_alu_op = 6'h37;
        M_checkoff_reg_d[2+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0001);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h37;
        if (M_alu_s == 16'h0001) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = CMPLE4_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      CMPLE4_testCase: begin
        M_alu_x = 16'hf001;
        M_alu_y = 16'hf001;
        M_alu_op = 6'h37;
        M_checkoff_reg_d[3+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0001);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h37;
        if (M_alu_s == 16'h0001) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = MULSTART_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      MULSTART_testCase: begin
        M_flag_reg_d = 8'h00;
        M_s_reg_d = 16'h8888;
        M_checkoff_reg_d = 16'h0000;
        M_alufn_reg_d = 1'h0;
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = MUL0_testCase;
        end
      end
      MUL0_testCase: begin
        M_alu_x = 16'h0005;
        M_alu_y = 16'h0000;
        M_alu_op = 6'h02;
        M_alufn_reg_d = 6'h02;
        M_checkoff_reg_d[0+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0000);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h02;
        if (M_alu_s == 16'h0000) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = MUL1_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      MUL1_testCase: begin
        M_alu_x = 16'h0005;
        M_alu_y = 16'h0005;
        M_alu_op = 6'h02;
        M_alufn_reg_d = 6'h02;
        M_checkoff_reg_d[1+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0019);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h02;
        if (M_alu_s == 16'h0019) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = MUL2_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      MUL2_testCase: begin
        M_alu_x = 16'h0005;
        M_alu_y = 16'hffff;
        M_alu_op = 6'h02;
        M_alufn_reg_d = 6'h02;
        M_checkoff_reg_d[2+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'hfffb);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h02;
        if (M_alu_s == 16'hfffb) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = MUL3_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      MUL3_testCase: begin
        M_alu_x = 16'hffff;
        M_alu_y = 16'hfff0;
        M_alu_op = 6'h02;
        M_alufn_reg_d = 6'h02;
        M_checkoff_reg_d[3+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0010);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h02;
        if (M_alu_s == 16'h0010) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = ERRCASE_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      ERRCASE_testCase: begin
        M_alu_x = 16'h0005;
        M_alu_y = 16'h0000;
        M_alu_op = 6'h3e;
        M_checkoff_reg_d[3+0-:1] = 1'h1;
        M_flag_reg_d[3+0-:1] = M_alu_z;
        M_flag_reg_d[2+0-:1] = M_alu_v;
        M_flag_reg_d[1+0-:1] = M_alu_n;
        M_flag_reg_d[0+0-:1] = (M_alu_s != 16'h0010);
        M_s_reg_d = M_alu_s;
        M_alufn_reg_d = 6'h02;
        if (M_alu_s == 16'h0010) begin
          if (M_edge_detector_out == 1'h1) begin
            M_testCase_d = END_testCase;
          end
        end else begin
          M_testCase_d = ERROR_STATE_testCase;
        end
      end
      END_testCase: begin
        M_flag_reg_d = 8'hff;
        M_checkoff_reg_d = 8'hff;
        M_s_reg_d = 16'hc001;
        M_alufn_reg_d = 6'h3f;
        s = M_s_reg_q;
        flag = M_flag_reg_q;
        checkoff = M_checkoff_reg_q;
        if (M_edge_detector_out == 1'h1) begin
          M_testCase_d = START_testCase;
        end
      end
      ERROR_STATE_testCase: begin
        if (M_button_detector_out == 1'h1) begin
          M_testCase_d = END_testCase;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_testCase_q <= 1'h0;
    end else begin
      M_testCase_q <= M_testCase_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_alufn_reg_q <= 1'h0;
    end else begin
      M_alufn_reg_q <= M_alufn_reg_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_checkoff_reg_q <= 1'h0;
    end else begin
      M_checkoff_reg_q <= M_checkoff_reg_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_flag_reg_q <= 1'h0;
    end else begin
      M_flag_reg_q <= M_flag_reg_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_s_reg_q <= 1'h0;
    end else begin
      M_s_reg_q <= M_s_reg_d;
    end
  end
  
endmodule
